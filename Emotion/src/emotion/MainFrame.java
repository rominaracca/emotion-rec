package emotion;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Romina Racca
 */
public class MainFrame extends javax.swing.JFrame {

    //public static File[] photos;
    private File[] photos;
    private int counting;
    private int hour, min, seg, ds, conditionHour, conditionMin, conditionSeg;
    public boolean issuspended = false; //para saber si el hilo esta suspendido o pausado
    Settings settings;// = new Settings();
    Information info; // = new Information();
    //private boolean start = false;
    
    //FileWriter outFile;
   // BufferedWriter outBuffWriter;
    FileWriter outFile = null;
    PrintWriter outPw;
    
    Thread thread = new Thread(){     //declaramos el hilo para manejar el cronometro
        @Override
        public void run(){
            try{            
                while(counting != photos.length-1){
                    if(ds == 99){   
                        ds = 0;     //decisegundo vuelve a empezar en cero
                        setSeg(getSeg() + 1);      //y aumenta un segundo   
                    }
                    if(getSeg() == 59){
                        setSeg(0);    //segundo vuelve a empezar en cero
                        setMin(getMin() + 1);      //y aumenta un minuto
                    }
                    if(getMin() == 59){
                        setMin(0);    //minuto vuelve a empezar en cero
                        setHour(getHour() + 1);     //y aumenta una hora
                    }
                    if(getSeg() == getConditionSeg() && getMin() == getConditionMin() && getHour() == getConditionHour()){
                        System.out.println("Nombre Imagen: "+photos[counting].getName());
                        System.out.println("Nobre del boton - Text: Tiempo agotado");
                        System.out.println("Tiempo: "+getHour()+" "+getMin()+" "+getSeg()+" "+getDs());
                        setDs(0);
                        setSeg(0);
                        setMin(0);
                        setHour(0);
                       
                        nextPicture();
                    }
                    
                    ds++;           //aumentan las decimas de segundo
                    thread.sleep(10);//que duerma una decima de segundo
                }
                
                System.out.println("Fin del while");
                //btnMenuStart.setEnabled(false);
               // new MainFrame();
             try{
                 if(outFile != null)
                     outFile.close();
             }catch(IOException ex){
                 System.err.println("Error:"+ex.toString());
             }
                
            } catch (java.lang.InterruptedException ie) {
                System.out.println(ie.getMessage());
            }
        }
    };
    
    public MainFrame() {
        initComponents();
        setLocationRelativeTo(null);
        setIconImage(new ImageIcon(getClass().getResource("/icon/flag.png")).getImage());
        settings = new Settings();
        info = new Information(); 
    }
 
  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menu = new javax.swing.JMenu();
        menuItem = new javax.swing.JMenuItem();
        jToolBar2 = new javax.swing.JToolBar();
        btnMenuOpen = new javax.swing.JButton();
        btnMenuTimer = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        btnMenuStart = new javax.swing.JButton();
        panelPicture = new javax.swing.JPanel();
        panelButtonEmotion = new javax.swing.JPanel();
        btnAlegria = new javax.swing.JButton();
        btnAsco = new javax.swing.JButton();
        btnEnojo = new javax.swing.JButton();
        btnMiedo = new javax.swing.JButton();
        btnSorpresa = new javax.swing.JButton();
        btnTristeza = new javax.swing.JButton();
        btnOtra = new javax.swing.JButton();
        btnNinguna = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        menuFunctions = new javax.swing.JMenu();
        menuItemStart = new javax.swing.JMenuItem();
        menuItemLoadInformation = new javax.swing.JMenuItem();
        menuItemSettings = new javax.swing.JMenuItem();
        separator = new javax.swing.JPopupMenu.Separator();
        menuItemExit = new javax.swing.JMenuItem();
        menuHelp = new javax.swing.JMenu();
        menuItemAbout = new javax.swing.JMenuItem();

        menu.setText("jMenu6");

        menuItem.setText("jMenuItem6");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Reconocimiento de emociones");
        setMinimumSize(new java.awt.Dimension(800, 600));
        setResizable(false);

        jToolBar2.setRollover(true);

        btnMenuOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/open32x32.png"))); // NOI18N
        btnMenuOpen.setToolTipText("Abrir archivo");
        btnMenuOpen.setFocusable(false);
        btnMenuOpen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnMenuOpen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnMenuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuOpenActionPerformed(evt);
            }
        });
        jToolBar2.add(btnMenuOpen);

        btnMenuTimer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/clock32x32.png"))); // NOI18N
        btnMenuTimer.setToolTipText("Ajustar cronometro");
        btnMenuTimer.setFocusable(false);
        btnMenuTimer.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnMenuTimer.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnMenuTimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuTimerActionPerformed(evt);
            }
        });
        jToolBar2.add(btnMenuTimer);
        jToolBar2.add(jSeparator1);

        btnMenuStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/play32x32.png"))); // NOI18N
        btnMenuStart.setToolTipText("Iniciar");
        btnMenuStart.setFocusable(false);
        btnMenuStart.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnMenuStart.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnMenuStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuStartActionPerformed(evt);
            }
        });
        jToolBar2.add(btnMenuStart);

        getContentPane().add(jToolBar2, java.awt.BorderLayout.PAGE_START);

        panelPicture.setMaximumSize(new java.awt.Dimension(600, 800));
        panelPicture.setMinimumSize(new java.awt.Dimension(600, 800));
        getContentPane().add(panelPicture, java.awt.BorderLayout.CENTER);

        panelButtonEmotion.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Emociones", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 0, 18))); // NOI18N
        panelButtonEmotion.setAlignmentX(10.0F);
        panelButtonEmotion.setAlignmentY(10.0F);
        panelButtonEmotion.setMaximumSize(new java.awt.Dimension(200, 200));
        panelButtonEmotion.setMinimumSize(new java.awt.Dimension(200, 200));
        panelButtonEmotion.setPreferredSize(new java.awt.Dimension(200, 200));
        panelButtonEmotion.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 15));

        btnAlegria.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAlegria.setText("Alegr√≠a");
        btnAlegria.setPreferredSize(new java.awt.Dimension(140, 40));
        btnAlegria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlegriaActionPerformed(evt);
            }
        });
        panelButtonEmotion.add(btnAlegria);

        btnAsco.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAsco.setText("Asco");
        btnAsco.setPreferredSize(new java.awt.Dimension(140, 40));
        btnAsco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAscoActionPerformed(evt);
            }
        });
        panelButtonEmotion.add(btnAsco);

        btnEnojo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnEnojo.setText("Enojo");
        btnEnojo.setPreferredSize(new java.awt.Dimension(140, 40));
        btnEnojo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnojoActionPerformed(evt);
            }
        });
        panelButtonEmotion.add(btnEnojo);

        btnMiedo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnMiedo.setText("Miedo");
        btnMiedo.setPreferredSize(new java.awt.Dimension(140, 40));
        btnMiedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMiedoActionPerformed(evt);
            }
        });
        panelButtonEmotion.add(btnMiedo);

        btnSorpresa.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSorpresa.setText("Sorpresa");
        btnSorpresa.setPreferredSize(new java.awt.Dimension(140, 40));
        btnSorpresa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSorpresaActionPerformed(evt);
            }
        });
        panelButtonEmotion.add(btnSorpresa);

        btnTristeza.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnTristeza.setText("Tristeza");
        btnTristeza.setPreferredSize(new java.awt.Dimension(140, 40));
        btnTristeza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTristezaActionPerformed(evt);
            }
        });
        panelButtonEmotion.add(btnTristeza);

        btnOtra.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnOtra.setText("Otra");
        btnOtra.setPreferredSize(new java.awt.Dimension(140, 40));
        btnOtra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOtraActionPerformed(evt);
            }
        });
        panelButtonEmotion.add(btnOtra);

        btnNinguna.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnNinguna.setText("Ninguna emoci√≥n");
        btnNinguna.setPreferredSize(new java.awt.Dimension(140, 40));
        btnNinguna.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNingunaActionPerformed(evt);
            }
        });
        panelButtonEmotion.add(btnNinguna);

        getContentPane().add(panelButtonEmotion, java.awt.BorderLayout.LINE_END);

        menuFunctions.setText("Acciones");

        menuItemStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/play22x22.png"))); // NOI18N
        menuItemStart.setText("Iniciar");
        menuItemStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemStartActionPerformed(evt);
            }
        });
        menuFunctions.add(menuItemStart);

        menuItemLoadInformation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/person22x22.png"))); // NOI18N
        menuItemLoadInformation.setText("Cargar datos");
        menuItemLoadInformation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemLoadInformationActionPerformed(evt);
            }
        });
        menuFunctions.add(menuItemLoadInformation);

        menuItemSettings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/settings24x24.png"))); // NOI18N
        menuItemSettings.setText("Ajustes");
        menuItemSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSettingsActionPerformed(evt);
            }
        });
        menuFunctions.add(menuItemSettings);
        menuFunctions.add(separator);

        menuItemExit.setText("Salir");
        menuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemExitActionPerformed(evt);
            }
        });
        menuFunctions.add(menuItemExit);

        menuBar.add(menuFunctions);
        menuFunctions.getAccessibleContext().setAccessibleParent(menu);

        menuHelp.setText("Ayuda");

        menuItemAbout.setText("Acerca de...");
        menuItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAboutActionPerformed(evt);
            }
        });
        menuHelp.add(menuItemAbout);

        menuBar.add(menuHelp);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents
 
   
    private void menuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_menuItemExitActionPerformed

    private void menuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemAboutActionPerformed
        About about = new About();
        about.setVisible(rootPaneCheckingEnabled);
    }//GEN-LAST:event_menuItemAboutActionPerformed

    
    private void btnAlegriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlegriaActionPerformed
        if(counting < photos.length-1){
            System.out.println(this.photos[this.counting].getName()+" : "+ btnAlegria.getText()+" : "+
                    getHour()+"."+getMin()+"."+getSeg()+"."+getDs());
            nextPicture();
            restartTimer();
            startTimer();
        }   
    }//GEN-LAST:event_btnAlegriaActionPerformed
 
    private void menuItemStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemStartActionPerformed
        startTimer();
    }//GEN-LAST:event_menuItemStartActionPerformed
  
    private void btnMenuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuOpenActionPerformed
        //JFileChooser fc = new JFileChooser("C:\\Users\\Romi\\Desktop\\");
        JFileChooser fcPicture = new JFileChooser();
        fcPicture.setFileFilter(new FileNameExtensionFilter("Archivo de imagen", "jpg", "JPG", "jpeg", "JPEG", "png", "PNG", "gif", "GIF"));
        int option = fcPicture.showDialog(this, "Abrir"); 
        panelPicture.removeAll();   //limpio el panel por si se carga otro directorio
        System.out.println("Limio panel");
        if(option == JFileChooser.APPROVE_OPTION){    
            File pictureFile = fcPicture.getSelectedFile(); 
            Picture picture = new Picture(pictureFile.getPath());  
            loadDirectory(pictureFile.getParent());
            panelPicture.add(picture);        
        }   
        
       // restartTimer();
    }//GEN-LAST:event_btnMenuOpenActionPerformed
    
    private void btnAscoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAscoActionPerformed

    }//GEN-LAST:event_btnAscoActionPerformed

    private void btnEnojoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnojoActionPerformed

    }//GEN-LAST:event_btnEnojoActionPerformed

    private void btnMiedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMiedoActionPerformed

    }//GEN-LAST:event_btnMiedoActionPerformed

    private void btnSorpresaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSorpresaActionPerformed

    }//GEN-LAST:event_btnSorpresaActionPerformed

    private void btnTristezaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTristezaActionPerformed

    }//GEN-LAST:event_btnTristezaActionPerformed

    private void btnOtraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOtraActionPerformed

    }//GEN-LAST:event_btnOtraActionPerformed

    private void btnNingunaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNingunaActionPerformed

    }//GEN-LAST:event_btnNingunaActionPerformed

    private void btnMenuTimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuTimerActionPerformed
        settings.setVisible(rootPaneCheckingEnabled);
    }//GEN-LAST:event_btnMenuTimerActionPerformed

    private void menuItemSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSettingsActionPerformed
          settings.setVisible(rootPaneCheckingEnabled);
    }//GEN-LAST:event_menuItemSettingsActionPerformed

    private void menuItemLoadInformationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemLoadInformationActionPerformed
        info.setVisible(rootPaneCheckingEnabled);
    }//GEN-LAST:event_menuItemLoadInformationActionPerformed

    private void btnMenuStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuStartActionPerformed
   /*    
        if(thread.isAlive()){
            System.out.println("Hilo vivo");
        }else{
            System.out.println("Hilo muerto");
             startTimer();
        }
        */
      
         
         try{
             // Obtengo el camino absoluto de mi directorio actual
             //String directory = System.getProperty("user.dir");
             //file = new FileWriter(System.getProperty("user.dir")+"resultados.txt", true);
             outFile = new FileWriter("C:\\Users\\Romi\\Desktop\\resultados.txt", true);
             outPw = new PrintWriter(outFile);
             
             outPw.print("************** INFORMACI√ìN PERSONAL **************\r\n");
             outPw.println("Apellido: "+info.getLastName()+"\r\n");
             outPw.println("Antecedentes m√©dicos: "+info.getMedicalHistory()+"\r\n");
             outPw.println("Nombre: "+info.getName()+"\r\n");
            outPw.println("Sexo: "+info.getSex()+"\r\n");
            outPw.println("Edad: "+info.getAge()+"\r\n");
            outPw.println("Estado civil: "+info.getCivilStatus()+"\r\n");
            outPw.println("A√±os de escolaridad: "+info.getEducationYears()+"\r\n");
            outPw.println("Ocupaci√≥n: "+info.getOccupation()+"\r\n");
            outPw.println("A√±os de ocupaci√≥n: "+info.getOccupationYears()+"\r\n");
            outPw.println("N√∫mero de caso: "+info.getCaseNumber()+"\r\n");
            outPw.println("C√≥digo: "+info.getCode()+"\r\n");

            outPw.println("************** ******************* **************\r\n");
            outPw.println("Antecedentes m√©dicos: "+info.getMedicalHistory()+"\r\n");
            outPw.println("Antecedentes psicol√≥gicos: "+info.getPsychologicalHistory()+"\r\n");
            outPw.println("Tratamiento farmacol√≥gico: "+info.getPharmacologicalTreatment()+"\r\n");
            outPw.println("Observaciones: "+info.getObservations()+"\r\n");

            outPw.println("*************** DATOS DE LA PRUEBA ***************\r\n");
            outPw.println("Imagen : Emocion : Tiempo(hs.min.seg.ds)\r\n");
        
         }catch(IOException e){
             System.err.println("Error:"+e.toString());
         }
        
        
        /*
       FileWriter outFile = null;
         try { 
             System.out.println("CREACION ARCHIVO");
            outFile = new FileWriter("C:\\Users\\Romi\\Desktop\\resultados.txt");
            BufferedWriter outBuffWriter = new BufferedWriter(outFile);
             System.out.println("FIN DE CREACION DE ARCHIVO");
                outBuffWriter.write("************** INFORMACI√ìN PERSONAL **************\r\n");
                outBuffWriter.write("Apellido: "+info.getLastName()+"\r\n");
                outBuffWriter.write("Nombre: "+info.getName()+"\r\n");
                outBuffWriter.write("Sexo: "+info.getSex()+"\r\n");
                outBuffWriter.write("Edad: "+info.getAge()+"\r\n");
                outBuffWriter.write("Estado civil: "+info.getCivilStatus()+"\r\n");
                outBuffWriter.write("A√±os de escolaridad: "+info.getEducationYears()+"\r\n");
                outBuffWriter.write("Ocupaci√≥n: "+info.getOccupation()+"\r\n");
                outBuffWriter.write("A√±os de ocupaci√≥n: "+info.getOccupationYears()+"\r\n");
                outBuffWriter.write("N√∫mero de caso: "+info.getCaseNumber()+"\r\n");
                outBuffWriter.write("C√≥digo: "+info.getCode()+"\r\n");
                
                outBuffWriter.write("************** ******************* **************\r\n");
                //outBuffWriter.write("Antecedentes m√©dicos: "+info.getMedicalHistory()+"\r\n");
                outBuffWriter.write("Antecedentes m√©dicos: "+info.txtAreaMedicalHistory.getText()+"\r\n");
                outBuffWriter.write("Antecedentes psicol√≥gicos: "+info.getPsychologicalHistory()+"\r\n");
                outBuffWriter.write("Tratamiento farmacol√≥gico: "+info.getPharmacologicalTreatment()+"\r\n");
                outBuffWriter.write("Observaciones: "+info.getObservations()+"\r\n");
             
                outBuffWriter.write("*************** DATOS DE LA PRUEBA ***************\r\n");
                outBuffWriter.write("Imagen : Emocion : Tiempo(hs.min.seg.ds)\r\n");
        
              //  cerrar archivo
            
               // outFile.close();
               // outBuffWriter.close();
        } catch (IOException ex) {
             System.err.println("Error: "+ex.toString());
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
             try{
                if(outFile != null)
                    outFile.close();
             }catch(IOException ex){
                 System.err.println("Error: "+ex.toString());
             }
         }
        */
        startTimer();
    }//GEN-LAST:event_btnMenuStartActionPerformed

    
    /**
     * Carga en el arreglo de File[] photos todas las im√°genes que se encuentren en la carpeta folder
     * @param folder carpeta desde la cual se cargan las im√°genes
     */
    public void loadDirectory(String folder){
        File dir = new File(folder);
        if (dir.isDirectory()){
            
            photos = dir.listFiles(new FilenameFilter(){ //Crea un arreglo de archivos imagenes
                public boolean accept(File file, String nombre){
                    if(nombre.endsWith(".jpg") || nombre.endsWith(".JPG") ||
                            nombre.endsWith(".jpeg") || nombre.endsWith(".JPEG") ||
                            nombre.endsWith(".gif") || nombre.endsWith(".GIF") ||
                            nombre.endsWith(".png") || nombre.endsWith(".PNG"))
                    {
                        return true;
                    }
                    return false;
                }
            });
            
        }
    }
    
    /**
     * En caso de haber imagenes pasa a la siguiente imagen y la pinta en la pantalla
     */
    public void nextPicture(){
        try{
            if(photos != null){
                   Picture tmp = (Picture) panelPicture.getComponent(0);
                   
                   if(counting < photos.length-1){
                       counting++;
                       tmp.setImagenFromFile(photos[counting]);      //Cambia la imagen a panelPicture por medio del m√©todo setImagenFromFile()
                   }
           }else{
//                stopTimer();
 //               System.out.println("PARO EL CRONOMETRO");
            }
        }catch(Exception e){
            System.err.println("Error en proxima imagen "+e.toString());
        }
    }
   
    
    /**
     * Inicia el cronometro.
     * Se configura el valor de corte del cronometro en base a la configuracion asignada en Settings
     */
    public void startTimer(){
      
        
            /*
        File fileSetting = null;
        FileReader fr = null;
        BufferedReader br = null;
        try{
            String directory = System.getProperty("user.dir");
            fileSetting = new File(directory+"/src/config/settings");
            fr = new FileReader(fileSetting);
            br = new BufferedReader(fr);
            
            //Lectura del archivo
            String line;
            while( (line = br.readLine()) != null){
                System.out.println(line);
            }
        }catch(IOException e){
            System.err.println("Error: "+e.toString());
        }finally{
            try{                    
                if( null != fr ){   
                    fr.close();     
                }     
            }catch(IOException e2){ 
                System.err.println("Error: "+e2.toString());
            }
        }
      */
       
        setConditionHour((int) settings.spiHour.getValue());
        setConditionMin((int) settings.spiMin.getValue());
       setConditionSeg((int) settings.spiSeg.getValue());
       
       try{
            if(!issuspended){
                System.out.println("START");
                thread.start();
            }else{
                System.out.println("RESUME");
                thread.resume();
                issuspended = false;
            }
        }catch(Exception e){
                System.err.println("Error: "+e.toString());
        }
    }

    /**
     * Se reinician los valores del cronometro
     * El hilo del cronometro se suspende
     * Hora, minutos, segundos y decimas de segundos se le asigna valor cero
     */
    public void restartTimer(){
        thread.suspend();
        setHour(0);
        setMin(0);
        setSeg(0);
        setDs(0);
        issuspended = true;
    }
    
  
    /*
    public void stopTimer(){
        thread.stop();
    }
    */
      /**
     * @return the hour
     */
    public int getHour() {
        return hour;
    }

    /**
     * @param hour the hour to set
     */
    public void setHour(int hour) {
        this.hour = hour;
    }

    /**
     * @return the min
     */
    public int getMin() {
        return min;
    }

    /**
     * @param min the min to set
     */
    public void setMin(int min) {
        this.min = min;
    }

    /**
     * @return the seg
     */
    public int getSeg() {
        return seg;
    }

    /**
     * @param seg the seg to set
     */
    public void setSeg(int seg) {
        this.seg = seg;
    }
    
     /**
     * @return the ds
     */
    public int getDs() {
        return ds;
    }

    /**
     * @param ds the seg to set
     */
    public void setDs(int ds) {
        this.ds = ds;
    }

    /**
     * @return the conditionHour
     */
    public int getConditionHour() {
        return conditionHour;
    }

    /**
     * @param conditionHour the conditionHour to set
     */
    public void setConditionHour(int conditionHour) {
        this.conditionHour = conditionHour;
    }

    /**
     * @return the conditionMin
     */
    public int getConditionMin() {
        return conditionMin;
    }

    /**
     * @param conditionMin the conditionMin to set
     */
    public void setConditionMin(int conditionMin) {
        this.conditionMin = conditionMin;
    }

    /**
     * @return the conditionSeg
     */
    public int getConditionSeg() {
        return conditionSeg;
    }

    /**
     * @param conditionSeg the conditionSeg to set
     */
    public void setConditionSeg(int conditionSeg) {
        this.conditionSeg = conditionSeg;
    }
       
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlegria;
    private javax.swing.JButton btnAsco;
    private javax.swing.JButton btnEnojo;
    private javax.swing.JButton btnMenuOpen;
    private javax.swing.JButton btnMenuStart;
    private javax.swing.JButton btnMenuTimer;
    private javax.swing.JButton btnMiedo;
    private javax.swing.JButton btnNinguna;
    private javax.swing.JButton btnOtra;
    private javax.swing.JButton btnSorpresa;
    private javax.swing.JButton btnTristeza;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JMenu menu;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuFunctions;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenuItem menuItem;
    private javax.swing.JMenuItem menuItemAbout;
    private javax.swing.JMenuItem menuItemExit;
    private javax.swing.JMenuItem menuItemLoadInformation;
    private javax.swing.JMenuItem menuItemSettings;
    private javax.swing.JMenuItem menuItemStart;
    private javax.swing.JPanel panelButtonEmotion;
    private javax.swing.JPanel panelPicture;
    private javax.swing.JPopupMenu.Separator separator;
    // End of variables declaration//GEN-END:variables
}
